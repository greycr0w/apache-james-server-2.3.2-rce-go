package exploitkit

import (
	"flag"
	"fmt"
	"os"
)

// Exploit defines the interface that all exploits must implement
type Exploit interface {
	Run() error
	Init(args []string) error
	Description() string
}

// Framework provides common functionality for all exploits
type Framework struct {
	Name       string
	Version    string
	Title      string
	Author     string
	Homepage   string
	Banner     string
	Logger     Logger
	FlagSet    *flag.FlagSet
	ShowBanner bool
}

// NewFramework creates a new exploit framework instance
func NewFramework(name string, title string) *Framework {
	return &Framework{
		Name:       name,
		Title:      title,
		Banner:     DefaultBanner,
		Logger:     &DefaultLogger{},
		FlagSet:    flag.NewFlagSet(name, flag.ExitOnError),
		ShowBanner: true,
	}
}

// PrintBanner prints just the banner
func (f *Framework) PrintBanner() {
	if f.ShowBanner {
		PrintBanner(BannerConfig{
			Art:      f.Banner,
			Author:   f.Author,
			Version:  f.Version,
			Homepage: f.Homepage,
		})
	}
}

// SetLogger allows changing the logger implementation
func (f *Framework) SetLogger(logger Logger) {
	f.Logger = logger
}

// PrintUsage prints just the usage information
func (f *Framework) PrintUsage() {
	fmt.Fprintf(os.Stderr, "\nUsage of %s:\n", f.Name)
	f.FlagSet.PrintDefaults()
}
